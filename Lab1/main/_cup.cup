// -*- Java -*- This Cup file was machine-generated by BNFC
package main;

parser code {:
  public main.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (main.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal main.Absyn.Program Program;
nonterminal main.Absyn.Def Def;
nonterminal main.Absyn.Arg Arg;
nonterminal main.Absyn.Stm Stm;
nonterminal main.Absyn.Exp Exp15;
nonterminal main.Absyn.Exp Exp14;
nonterminal main.Absyn.Exp Exp13;
nonterminal main.Absyn.Exp Exp12;
nonterminal main.Absyn.Exp Exp11;
nonterminal main.Absyn.Exp Exp9;
nonterminal main.Absyn.Exp Exp8;
nonterminal main.Absyn.Exp Exp4;
nonterminal main.Absyn.Exp Exp3;
nonterminal main.Absyn.Exp Exp2;
nonterminal main.Absyn.Exp Exp;
nonterminal main.Absyn.Exp Exp1;
nonterminal main.Absyn.Exp Exp5;
nonterminal main.Absyn.Exp Exp6;
nonterminal main.Absyn.Exp Exp7;
nonterminal main.Absyn.Exp Exp10;
nonterminal main.Absyn.ListExp ListExp;
nonterminal main.Absyn.ListDef ListDef;
nonterminal main.Absyn.ListArg ListArg;
nonterminal main.Absyn.ListId ListId;
nonterminal main.Absyn.ListStm ListStm;
nonterminal main.Absyn.Type Type;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   =
terminal _SYMB_5;    //   ;
terminal _SYMB_6;    //   ,
terminal _SYMB_7;    //   ++
terminal _SYMB_8;    //   --
terminal _SYMB_9;    //   -
terminal _SYMB_10;    //   *
terminal _SYMB_11;    //   /
terminal _SYMB_12;    //   +
terminal _SYMB_13;    //   <
terminal _SYMB_14;    //   >
terminal _SYMB_15;    //   <=
terminal _SYMB_16;    //   >=
terminal _SYMB_17;    //   ==
terminal _SYMB_18;    //   !=
terminal _SYMB_19;    //   &&
terminal _SYMB_20;    //   ||
terminal _SYMB_21;    //   bool
terminal _SYMB_22;    //   const
terminal _SYMB_23;    //   double
terminal _SYMB_24;    //   else
terminal _SYMB_25;    //   false
terminal _SYMB_26;    //   if
terminal _SYMB_27;    //   int
terminal _SYMB_28;    //   return
terminal _SYMB_29;    //   string
terminal _SYMB_30;    //   true
terminal _SYMB_31;    //   typedef
terminal _SYMB_32;    //   void
terminal _SYMB_33;    //   while

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String Id;


start with Program;


Program ::= ListDef:p_1  {: RESULT = new main.Absyn.PDefs(p_1); :} 
;
Def ::= Type:p_1 Id:p_2 _SYMB_0 ListArg:p_4 _SYMB_1 _SYMB_2 ListStm:p_7 _SYMB_3  {: RESULT = new main.Absyn.DFun(p_1,p_2,p_4,p_7); :} 
  | Stm:p_1  {: RESULT = new main.Absyn.DStm(p_1); :}
  | _SYMB_31 Type:p_2 Exp:p_3  {: RESULT = new main.Absyn.DTypedef(p_2,p_3); :}
;
Arg ::= Type:p_1  {: RESULT = new main.Absyn.AType(p_1); :} 
  | Type:p_1 Id:p_2  {: RESULT = new main.Absyn.ATypeId(p_1,p_2); :}
  | Type:p_1 Id:p_2 _SYMB_4 Exp:p_4  {: RESULT = new main.Absyn.AExp(p_1,p_2,p_4); :}
  | _SYMB_22 Type:p_2 Id:p_3  {: RESULT = new main.Absyn.AConst(p_2,p_3); :}
;
Stm ::= Exp:p_1 _SYMB_5  {: RESULT = new main.Absyn.SExp(p_1); :} 
  | _SYMB_28 Exp:p_2 _SYMB_5  {: RESULT = new main.Absyn.SReturn(p_2); :}
  | _SYMB_33 _SYMB_0 Exp:p_3 _SYMB_1 Stm:p_5  {: RESULT = new main.Absyn.SWhile(p_3,p_5); :}
  | _SYMB_2 ListStm:p_2 _SYMB_3  {: RESULT = new main.Absyn.SBlock(p_2); :}
  | _SYMB_26 _SYMB_0 Exp:p_3 _SYMB_1 Stm:p_5 _SYMB_24 Stm:p_7  {: RESULT = new main.Absyn.SIfElse(p_3,p_5,p_7); :}
  | Type:p_1 Id:p_2 _SYMB_5  {: RESULT = new main.Absyn.SDecl(p_1,p_2); :}
  | Type:p_1 Id:p_2 _SYMB_6 ListId:p_4 _SYMB_5  {: RESULT = new main.Absyn.SDecls(p_1,p_2,p_4); :}
  | Type:p_1 Id:p_2 _SYMB_4 Exp:p_4 _SYMB_5  {: RESULT = new main.Absyn.SInit(p_1,p_2,p_4); :}
;
Exp15 ::= _INTEGER_:p_1  {: RESULT = new main.Absyn.EInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new main.Absyn.EDouble(p_1); :}
  | _STRING_:p_1  {: RESULT = new main.Absyn.EString(p_1); :}
  | _SYMB_30  {: RESULT = new main.Absyn.ETrue(); :}
  | _SYMB_25  {: RESULT = new main.Absyn.EFalse(); :}
  | Id:p_1  {: RESULT = new main.Absyn.EId(p_1); :}
  | Id:p_1 _SYMB_0 ListExp:p_3 _SYMB_1  {: RESULT = new main.Absyn.ECall(p_1,p_3); :}
  | _SYMB_0 Exp:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Exp14 ::= Exp15:p_1 _SYMB_7  {: RESULT = new main.Absyn.EPIncr(p_1); :} 
  | Exp15:p_1 _SYMB_8  {: RESULT = new main.Absyn.EPDecr(p_1); :}
  | Exp15:p_1  {: RESULT = p_1; :}
;
Exp13 ::= _SYMB_7 Exp14:p_2  {: RESULT = new main.Absyn.EIncr(p_2); :} 
  | _SYMB_8 Exp14:p_2  {: RESULT = new main.Absyn.EDecr(p_2); :}
  | _SYMB_9 Exp14:p_2  {: RESULT = new main.Absyn.ENeg(p_2); :}
  | Exp14:p_1  {: RESULT = p_1; :}
;
Exp12 ::= Exp12:p_1 _SYMB_10 Exp13:p_3  {: RESULT = new main.Absyn.EMul(p_1,p_3); :} 
  | Exp12:p_1 _SYMB_11 Exp13:p_3  {: RESULT = new main.Absyn.EDiv(p_1,p_3); :}
  | Exp13:p_1  {: RESULT = p_1; :}
;
Exp11 ::= Exp11:p_1 _SYMB_12 Exp12:p_3  {: RESULT = new main.Absyn.EAdd(p_1,p_3); :} 
  | Exp11:p_1 _SYMB_9 Exp12:p_3  {: RESULT = new main.Absyn.ESub(p_1,p_3); :}
  | Exp12:p_1  {: RESULT = p_1; :}
;
Exp9 ::= Exp9:p_1 _SYMB_13 Exp10:p_3  {: RESULT = new main.Absyn.ELt(p_1,p_3); :} 
  | Exp9:p_1 _SYMB_14 Exp10:p_3  {: RESULT = new main.Absyn.EGt(p_1,p_3); :}
  | Exp9:p_1 _SYMB_15 Exp10:p_3  {: RESULT = new main.Absyn.ELEq(p_1,p_3); :}
  | Exp9:p_1 _SYMB_16 Exp10:p_3  {: RESULT = new main.Absyn.EGEq(p_1,p_3); :}
  | Exp10:p_1  {: RESULT = p_1; :}
;
Exp8 ::= Exp8:p_1 _SYMB_17 Exp9:p_3  {: RESULT = new main.Absyn.EEq(p_1,p_3); :} 
  | Exp8:p_1 _SYMB_18 Exp9:p_3  {: RESULT = new main.Absyn.ENEq(p_1,p_3); :}
  | Exp9:p_1  {: RESULT = p_1; :}
;
Exp4 ::= Exp4:p_1 _SYMB_19 Exp5:p_3  {: RESULT = new main.Absyn.EAnd(p_1,p_3); :} 
  | Exp5:p_1  {: RESULT = p_1; :}
;
Exp3 ::= Exp3:p_1 _SYMB_20 Exp4:p_3  {: RESULT = new main.Absyn.EOr(p_1,p_3); :} 
  | Exp4:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Exp3:p_1 _SYMB_4 Exp2:p_3  {: RESULT = new main.Absyn.EAss(p_1,p_3); :} 
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp ::= Exp1:p_1  {: RESULT = p_1; :} 
;
Exp1 ::= Exp2:p_1  {: RESULT = p_1; :} 
;
Exp5 ::= Exp6:p_1  {: RESULT = p_1; :} 
;
Exp6 ::= Exp7:p_1  {: RESULT = p_1; :} 
;
Exp7 ::= Exp8:p_1  {: RESULT = p_1; :} 
;
Exp10 ::= Exp11:p_1  {: RESULT = p_1; :} 
;
ListExp ::=  /* empty */  {: RESULT = new main.Absyn.ListExp(); :} 
  | Exp:p_1  {: RESULT = new main.Absyn.ListExp(); RESULT.addLast(p_1); :}
  | Exp:p_1 _SYMB_6 ListExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListDef ::=  /* empty */  {: RESULT = new main.Absyn.ListDef(); :} 
  | ListDef:p_1 Def:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListArg ::= Arg:p_1  {: RESULT = new main.Absyn.ListArg(); RESULT.addLast(p_1); :} 
  | Arg:p_1 _SYMB_6 ListArg:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListId ::= Id:p_1  {: RESULT = new main.Absyn.ListId(); RESULT.addLast(p_1); :} 
  | Id:p_1 _SYMB_6 ListId:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListStm ::=  /* empty */  {: RESULT = new main.Absyn.ListStm(); :} 
  | Stm:p_1 ListStm:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
  |  /* empty */  {: RESULT = new main.Absyn.ListStm(); :}
  | Stm:p_1 ListStm:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Type ::= _SYMB_21  {: RESULT = new main.Absyn.Tbool(); :} 
  | _SYMB_23  {: RESULT = new main.Absyn.Tdouble(); :}
  | _SYMB_27  {: RESULT = new main.Absyn.Tint(); :}
  | _SYMB_29  {: RESULT = new main.Absyn.Tstring(); :}
  | _SYMB_32  {: RESULT = new main.Absyn.Tvoid(); :}
;

