-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCpp where
import AbsCpp
import LexCpp
import ErrM

}

%name pProgram Program
%name pDef Def
%name pArg Arg
%name pDecl Decl
%name pStm3 Stm3
%name pStm2 Stm2
%name pStm1 Stm1
%name pStm Stm
%name pAssociative Associative
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pType Type
%name pType1 Type1
%name pId Id
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pId1 Id1
%name pListExp ListExp
%name pListArg ListArg
%name pListId ListId
%name pListDecl ListDecl
%name pListQuaConstId ListQuaConstId
%name pListString ListString
%name pListAssociative ListAssociative
%name pListDef ListDef
%name pListStm1 ListStm1
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'char' { PT _ (TS _ 34) }
  'const' { PT _ (TS _ 35) }
  'do' { PT _ (TS _ 36) }
  'double' { PT _ (TS _ 37) }
  'else' { PT _ (TS _ 38) }
  'false' { PT _ (TS _ 39) }
  'for' { PT _ (TS _ 40) }
  'if' { PT _ (TS _ 41) }
  'int' { PT _ (TS _ 42) }
  'return' { PT _ (TS _ 43) }
  'throw' { PT _ (TS _ 44) }
  'true' { PT _ (TS _ 45) }
  'typedef' { PT _ (TS _ 46) }
  'using' { PT _ (TS _ 47) }
  'void' { PT _ (TS _ 48) }
  'while' { PT _ (TS _ 49) }
  '{' { PT _ (TS _ 50) }
  '||' { PT _ (TS _ 51) }
  '}' { PT _ (TS _ 52) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_QuaConstId { PT _ (T_QuaConstId $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
QuaConstId    :: { QuaConstId} : L_QuaConstId { QuaConstId ($1)}

Program :: { Program }
Program : ListDef { AbsCpp.PDefs (reverse $1) }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm1 '}' { AbsCpp.DFunStm $1 $2 $4 (reverse $7) }
    | Type Id '(' ListArg ')' ';' { AbsCpp.DFun $1 $2 $4 }
    | Stm3 { AbsCpp.DDecl $1 }
    | 'using' Id ';' { AbsCpp.DUsing $2 }
Arg :: { Arg }
Arg : Type { AbsCpp.AType $1 }
    | 'const' Type { AbsCpp.ATypeConst $2 }
    | Type Id { AbsCpp.ATypeId $1 $2 }
    | Type Id '=' Exp { AbsCpp.AExp $1 $2 $4 }
    | 'const' Type Id { AbsCpp.AConst $2 $3 }
Decl :: { Decl }
Decl : Id { AbsCpp.Decl $1 } | Id '=' Exp { AbsCpp.DeclExp $1 $3 }
Stm3 :: { Stm }
Stm3 : 'const' Type ListDecl ';' { AbsCpp.SDeclConst $2 $3 }
     | 'typedef' Type Id ';' { AbsCpp.STypedef $2 $3 }
     | Type ListDecl ';' { AbsCpp.SDecl $1 $2 }
     | '(' Stm ')' { $2 }
Stm2 :: { Stm }
Stm2 : Exp ';' { AbsCpp.SExp $1 } | Stm3 { $1 }
Stm1 :: { Stm }
Stm1 : 'return' Exp ';' { AbsCpp.SReturn $2 }
     | 'while' '(' Exp ')' Stm { AbsCpp.SWhile $3 $5 }
     | 'do' Stm 'while' '(' Exp ')' Stm { AbsCpp.SDoWhile $2 $5 $7 }
     | 'for' '(' Stm3 Exp ';' Exp ')' Stm { AbsCpp.SFor $3 $4 $6 $8 }
     | 'if' '(' Exp ')' Stm { AbsCpp.SIf $3 $5 }
     | 'if' '(' Exp ')' Stm 'else' Stm { AbsCpp.SIfElse $3 $5 $7 }
     | Stm2 { $1 }
Stm :: { Stm }
Stm : '{' ListStm1 '}' { AbsCpp.SBlock (reverse $2) }
    | ';' { AbsCpp.SEnd }
    | Stm1 { $1 }
Associative :: { Associative }
Associative : '(' ListExp ')' { AbsCpp.PFun $2 }
            | '[' Exp ']' { AbsCpp.PIndex $2 }
Exp16 :: { Exp }
Exp16 : Integer { AbsCpp.EInt $1 }
      | Double { AbsCpp.EDouble $1 }
      | ListString { AbsCpp.EString $1 }
      | Char { AbsCpp.EChar $1 }
      | 'true' { AbsCpp.ETrue }
      | 'false' { AbsCpp.EFalse }
      | Id { AbsCpp.EId $1 }
      | Id ListAssociative { AbsCpp.ECall $1 $2 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Exp15 '.' Exp16 { AbsCpp.EStut $1 $3 }
      | Exp15 '->' Exp16 { AbsCpp.EPro $1 $3 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp14 '++' { AbsCpp.EPIncr $1 }
      | Exp14 '--' { AbsCpp.EPDecr $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp13 { AbsCpp.EIncr $2 }
      | '--' Exp13 { AbsCpp.EDecr $2 }
      | '*' Exp13 { AbsCpp.EDere $2 }
      | '!' Exp13 { AbsCpp.ENege $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsCpp.EMul $1 $3 }
      | Exp12 '/' Exp13 { AbsCpp.EDiv $1 $3 }
      | Exp12 '%' Exp13 { AbsCpp.EMod $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsCpp.EAdd $1 $3 }
      | Exp11 '-' Exp12 { AbsCpp.ESub $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsCpp.ELShift $1 $3 }
      | Exp10 '>>' Exp11 { AbsCpp.ERShift $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsCpp.ELt $1 $3 }
     | Exp9 '>' Exp10 { AbsCpp.EGt $1 $3 }
     | Exp9 '<=' Exp10 { AbsCpp.ELEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsCpp.EGEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsCpp.EEq $1 $3 }
     | Exp8 '!=' Exp9 { AbsCpp.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCpp.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsCpp.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsCpp.EAss $1 $3 }
     | Exp3 '-=' Exp2 { AbsCpp.EAssDec $1 $3 }
     | Exp3 '+=' Exp2 { AbsCpp.EAssInc $1 $3 }
     | Exp3 '?' Exp3 ':' Exp3 { AbsCpp.ECond $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp1 { AbsCpp.EThrow $2 } | Exp2 { $1 }
Type :: { Type }
Type : Type1 '&' { AbsCpp.TAddr $1 } | Type1 { $1 }
Type1 :: { Type }
Type1 : 'bool' { AbsCpp.TBool }
      | 'double' { AbsCpp.TDouble }
      | 'int' { AbsCpp.TInt }
      | 'void' { AbsCpp.TVoid }
      | 'char' { AbsCpp.TChar }
      | Id { AbsCpp.TId $1 }
      | '(' Type ')' { $2 }
Id :: { Id }
Id : ListQuaConstId { AbsCpp.IId $1 } | Id1 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Id1 :: { Id }
Id1 : '(' Id ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListId :: { [Id] }
ListId : {- empty -} { [] }
       | Id { (:[]) $1 }
       | Id ',' ListId { (:) $1 $3 }
ListDecl :: { [Decl] }
ListDecl : Decl { (:[]) $1 } | Decl ',' ListDecl { (:) $1 $3 }
ListQuaConstId :: { [QuaConstId] }
ListQuaConstId : QuaConstId { (:[]) $1 }
               | QuaConstId '::' ListQuaConstId { (:) $1 $3 }
ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }
ListAssociative :: { [Associative] }
ListAssociative : Associative { (:[]) $1 }
                | Associative ListAssociative { (:) $1 $2 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
ListStm1 :: { [Stm] }
ListStm1 : {- empty -} { [] } | ListStm1 Stm1 { flip (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

