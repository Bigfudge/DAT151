PDefs. Program ::= [Def] ;

DFun. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunn. Def ::= Type Id "(" [Arg] ");";
DDecl. Def ::= Type Decl;
DTypedef. Def ::= "typedef" Type Id ";";
DUsing. Def ::= "using" Id ";";

AType. Arg ::= Type ;
ATypeId. Arg ::= Type Id ;
AExp. Arg ::= Type Id "=" Exp ;
AConst. Arg ::= "const" Type Id;


Test. Decl ::=  Id ;
Test2. Decl ::=  Id "=" Exp ;

SExp. Stm ::= Exp ";" ;
SReturn. Stm ::= "return" Exp ";" ;
SWhile. Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile. Stm ::= "do" Stm ";" "while" "(" Exp ")" Stm ;
SBlock. Stm ::= "{" [Stm] "}" ;
SFor. Stm ::= "for" "(" Decl ";" Exp ";" Exp ")" Stm ;
SIf. Stm ::= "if" "("Exp ")" Stm;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SDecl. Stm ::= Type [Decl] ";";
STypedef. Stm ::= "typedef" Type Id ";";



EInt. Exp16 ::= Integer ;
EDouble. Exp16 ::= Double ;
EString. Exp16 ::= [String] ;
EChar. Exp16 ::= Char;
ETrue. Exp16 ::= "true" ;
EFalse. Exp16 ::= "false" ;
EId. Exp16 ::= Id ;
ECall. Exp16 ::= Exp16 "(" [Exp] ")" ;
EIndex. Exp16 ::= Exp16 "[" Exp "]";

EStut. Exp15 ::= Exp16 "." Exp16;
EPro. Exp15 ::= Exp15 "->" Exp16;

EPIncr. Exp14 ::= Exp14 "++" ;
EPDecr. Exp14 ::= Exp14 "--" ;

EIncr. Exp13 ::= "++" Exp13 ;
EDecr. Exp13 ::= "--" Exp13 ;
EDere. Exp13 ::= "*" Exp13;
ENege. Exp13 ::= "!" Exp13;

EMul. Exp12 ::= Exp12 "*" Exp13 ;
EDiv. Exp12 ::= Exp12 "/" Exp13 ;
EAdd. Exp11 ::= Exp11 "+" Exp12 ;
ESub. Exp11 ::= Exp11 "-" Exp12 ;
ELShift. Exp10 ::= Exp10 "<<" Exp11;
ERShift. Exp10 ::= Exp10 ">>" Exp11;
ELt. Exp9 ::= Exp9 "<" Exp10 ;
EGt. Exp9 ::= Exp9 ">" Exp10 ;
ELEq. Exp9 ::= Exp9 "<=" Exp10 ;
EGEq. Exp9 ::= Exp9 ">=" Exp10 ;
EEq. Exp8 ::= Exp8 "==" Exp9 ;
ENEq. Exp8 ::= Exp8 "!=" Exp9 ;
EAnd. Exp4 ::= Exp4 "&&" Exp5 ;
EOr. Exp3 ::= Exp3 "||" Exp4 ;
EAss. Exp2 ::= Exp3 "=" Exp2 ;
EAssDec. Exp2 ::= Exp3 "-=" Exp2;
EAssInc. Exp2 ::= Exp3 "+=" Exp2;
ECond. Exp2 ::= Exp3 "?" Exp2 ":" Exp2;
EThrow. Exp1 ::= "throw" Exp ;

coercions Exp 16 ;
coercions Id  1 ;


separator Exp "," ;
separator Def "";
separator Arg "," ;
separator Id ",";
separator nonempty Decl ",";
separator nonempty QuaConstId "::";
separator nonempty String "";


IId. Id ::= [QuaConstId];

separator Stm "";

terminator Stm "" ;
terminator Def "";

comment "//" ;
comment "/*" "*/" ;
comment "#";

token QuaConstId (letter (letter | digit | '_')*) ;

Tbool. Type ::= "bool" ;
Tdouble. Type ::= "double" ;
Tint. Type ::= "int" ;
Tvoid. Type ::= "void" ;
Tchar. Type ::= "char";
TId. Type ::= Id;
TQuConst. Type ::= Id "::" Type;
