PDefs. Program ::= [Def] ;

-------DEFINITIONS-------
DFunStm. Def ::= Type Id "(" [Arg] ")" "{" [Stm1] "}" ;
DFun. Def ::= Type Id "(" [Arg] ")"";";
DDecl. Def ::= Stm3;
DUsing. Def ::= "using" QualifiedConstant ";";

-------ARGUMENTS-------
AType. Arg ::= Type ;
ATypeConst. Arg ::= "const" Type ;
ATypeId. Arg ::= Type Id ;
AExp. Arg ::= Type Id "=" Exp ;
AConst. Arg ::= "const" Type Id;

-------DECLARATIONS-------
Decl. Decl ::=  Id ;
DeclExp. Decl ::=  Id "=" Exp ;

-------STATEMENTS-------
SDeclConst. Stm3 ::= "const" Type [Decl] ";";
STypedef. Stm3 ::= "typedef" Type Id ";";
SDecl. Stm3 ::= Type [Decl] ";";
SExp. Stm2 ::= Exp ";" ;
SReturn. Stm1 ::= "return" Exp ";" ;
SWhile. Stm1 ::= "while" "(" Exp ")" Stm ;
SDoWhile. Stm1 ::= "do" Stm "while" "(" Exp ")" Stm ;
SFor. Stm1 ::= "for" "(" Stm3 Exp ";" Exp ")" Stm ;
SIf. Stm1 ::= "if" "("Exp ")" Stm;
SIfElse. Stm1 ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock. Stm ::= "{" [Stm1] "}" ;
SEnd. Stm ::= ";";

-------EXPRESSIONS-------
EInt. Exp15 ::= Integer ;
EDouble. Exp15 ::= Double ;
EString. Exp15 ::= [String] ;
EChar. Exp15 ::= Char;
ETrue. Exp15 ::= "true" ;
EFalse. Exp15 ::= "false" ;
EId. Exp15 ::= QualifiedConstant ;

EFun. Exp14 ::= Exp14 "("[Exp] ")";
EIndex. Exp14 ::= Exp14 "["Exp "]";

EStut. Exp14 ::= Exp14 "." Exp15;
EPro. Exp14 ::= Exp14 "->" Exp15;
EPIncr. Exp14 ::= Exp14 "++" ;
EPDecr. Exp14 ::= Exp14 "--" ;

EIncr. Exp13 ::= "++" Exp13 ;
EDecr. Exp13 ::= "--" Exp13 ;
EDere. Exp13 ::= "*" Exp13;
ENege. Exp13 ::= "!" Exp13;

EMul. Exp12 ::= Exp12 "*" Exp13 ;
EDiv. Exp12 ::= Exp12 "/" Exp13 ;
EMod. Exp12 ::= Exp12 "%" Exp13 ;

EAdd. Exp11 ::= Exp11 "+" Exp12 ;
ESub. Exp11 ::= Exp11 "-" Exp12 ;

ELShift. Exp10 ::= Exp10 "<<" Exp11;
ERShift. Exp10 ::= Exp10 ">>" Exp11;

ELt. Exp9 ::= Exp9 "<" Exp10 ;
EGt. Exp9 ::= Exp9 ">" Exp10 ;
ELEq. Exp9 ::= Exp9 "<=" Exp10 ;
EGEq. Exp9 ::= Exp9 ">=" Exp10 ;

EEq. Exp8 ::= Exp8 "==" Exp9 ;
ENEq. Exp8 ::= Exp8 "!=" Exp9 ;

EAnd. Exp4 ::= Exp4 "&&" Exp5 ;

EOr. Exp3 ::= Exp3 "||" Exp4 ;

EAss. Exp2 ::= Exp3 "=" Exp2 ;
EAssDec. Exp2 ::= Exp3 "-=" Exp2;
EAssInc. Exp2 ::= Exp3 "+=" Exp2;
ECond. Exp2 ::= Exp2 "?" Exp3 ":" Exp3;

EThrow. Exp1 ::= "throw" Exp1 ;


-------TYPES-------
TAddr. Type ::= Type "&";
TBool. Type ::= "bool" ;
TDouble. Type ::= "double" ;
TInt. Type ::= "int" ;
TVoid. Type ::= "void" ;
TChar. Type ::= "char";
TId. Type ::= QualifiedConstant;

-------ID-------
QuaConstId. QuaConstElem       ::= Id;
QuaConstElems . QualifiedConstant ::= [QuaConstElem] ;

token Id	(letter (letter | digit | '_')*) ;

-------COERCIONS-------
coercions Exp 15 ;
coercions Stm 3;

-------SEPERATORS-------
separator Exp "," ;
separator Arg "," ;
separator nonempty Decl ",";
separator nonempty String "";
separator nonempty QuaConstElem "::" ;

-------TERMINATORS-------
terminator Def "";
terminator Stm1 "";

-------COMMENTS-------
comment "//" ;
comment "/*" "*/" ;
comment "#";
